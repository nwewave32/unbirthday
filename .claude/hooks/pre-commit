#!/bin/bash

# Pre-commit hook for auto-updating README.md and CLAUDE.md

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Running pre-commit auto-documentation update...${NC}"

# Get staged files
STAGED_FILES=$(git diff --cached --name-only)

# Check if there are staged files
if [ -z "$STAGED_FILES" ]; then
    echo "No staged files found"
    exit 0
fi

# Function to update README.md
update_readme() {
    local current_date=$(date '+%Y-%m-%d %H:%M:%S')

    # Add a changelog section if it doesn't exist
    if ! grep -q "## 📝 Changelog" README.md; then
        echo -e "\n## 📝 Changelog\n" >> README.md
    fi

    # Create a temp file with the update
    local temp_file=$(mktemp)
    local update_entry="- **${current_date}**: Updated files: $(echo $STAGED_FILES | tr '\n' ' ')"

    # Insert the new entry after the Changelog header
    awk -v entry="$update_entry" '
    /^## 📝 Changelog/ {
        print $0
        print ""
        print entry
        next
    }
    { print }
    ' README.md > "$temp_file"

    mv "$temp_file" README.md

    echo -e "${GREEN}✓ README.md updated with latest changes${NC}"
}

# Function to update CLAUDE.md
update_claude() {
    local current_date=$(date '+%Y-%m-%d %H:%M:%S')

    # Add a project updates section if it doesn't exist
    if ! grep -q "# Project Updates" CLAUDE.md; then
        echo -e "\n# Project Updates\n" >> CLAUDE.md
    fi

    # Create a temp file with the update
    local temp_file=$(mktemp)
    local update_entry="## ${current_date}\n\n**Modified Files:**\n$(echo "$STAGED_FILES" | sed 's/^/- /')\n\n**Changes:**\n- Automated documentation update\n"

    # Insert the new entry after the Project Updates header
    awk -v entry="$update_entry" '
    /^# Project Updates/ {
        print $0
        print ""
        print entry
        next
    }
    { print }
    ' CLAUDE.md > "$temp_file"

    mv "$temp_file" CLAUDE.md

    echo -e "${GREEN}✓ CLAUDE.md updated with project changes${NC}"
}

# Check if we should update documentation
SHOULD_UPDATE=false

# Update if source files are modified
if echo "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx|py|md|json|yaml|yml)$'; then
    SHOULD_UPDATE=true
fi

# Update if package.json is modified
if echo "$STAGED_FILES" | grep -q "package.json"; then
    SHOULD_UPDATE=true
fi

if [ "$SHOULD_UPDATE" = true ]; then
    update_readme
    update_claude

    # Stage the updated documentation files
    git add README.md CLAUDE.md

    echo -e "${GREEN}✓ Documentation automatically updated and staged${NC}"
else
    echo -e "${YELLOW}No significant changes detected, skipping documentation update${NC}"
fi

echo -e "${GREEN}Pre-commit hook completed successfully${NC}"
exit 0